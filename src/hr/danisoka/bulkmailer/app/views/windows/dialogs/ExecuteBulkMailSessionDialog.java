package hr.danisoka.bulkmailer.app.views.windows.dialogs;

import com.sun.mail.util.MailLogger;
import hr.danisoka.bulkmailer.app.AppConstants;
import hr.danisoka.bulkmailer.app.BulkMailerApplication;
import hr.danisoka.bulkmailer.app.contracts.ExecuteSessionContract;
import hr.danisoka.bulkmailer.app.listeners.ProgressListener;
import hr.danisoka.bulkmailer.app.loggers.MailLoggerHandler;
import hr.danisoka.bulkmailer.app.mailers.FoiMailer;
import hr.danisoka.bulkmailer.app.mailers.Mailer;
import hr.danisoka.bulkmailer.app.models.Session;
import hr.danisoka.bulkmailer.app.models.attempts.AttemptJson;
import hr.danisoka.bulkmailer.app.models.session.BulkEmailData;
import hr.danisoka.bulkmailer.app.utils.AttemptUtils;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

public class ExecuteBulkMailSessionDialog extends javax.swing.JDialog implements ExecuteSessionContract.View, ProgressListener, MailLoggerHandler.LoggerErrorListener {

    public ExecuteBulkMailSessionDialog(java.awt.Frame parent, boolean modal, Session session) {
        super(parent, modal);
        initComponents();
        setupButtons();
        this.parent = parent;
        prepareProgressBar();
        this.session = session;
        this.setTitle(this.session.getName());
        this.jcboxEmailMode.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                String selectedItem = e.getItem().toString();
                txtEmailSpecification.setEnabled(selectedItem.equals(AppConstants.AppSettings.Mail.SendingMode.SEND_TO_EMAILS));
                if(selectedItem.equals(AppConstants.AppSettings.Mail.SendingMode.SEND_ALL)) {
                    txtEmailSpecification.setText(null);
                }
                bulkEmailData = null;
            }
        });      
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblEmailMode = new javax.swing.JLabel();
        jcboxEmailMode = new javax.swing.JComboBox<>();
        lblEmailSpecification = new javax.swing.JLabel();
        txtEmailSpecification = new javax.swing.JTextField();
        btnPreviewAll = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        jpbarProgress = new javax.swing.JProgressBar();
        lblProgressTask = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        lblEmailMode.setText("Način slanja e-mail pošte:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(lblEmailMode, gridBagConstraints);

        jcboxEmailMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pošalji svima", "Pošalji na e-mail adrese" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jcboxEmailMode, gridBagConstraints);

        lblEmailSpecification.setText("E-mail adrese (više e-mail adresa odvojiti zarezima): ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        getContentPane().add(lblEmailSpecification, gridBagConstraints);

        txtEmailSpecification.setEnabled(false);
        txtEmailSpecification.setMinimumSize(new java.awt.Dimension(300, 20));
        txtEmailSpecification.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 12;
        getContentPane().add(txtEmailSpecification, gridBagConstraints);

        btnPreviewAll.setText("Pregledaj sve");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(btnPreviewAll, gridBagConstraints);

        btnSend.setText("Pošalji");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(btnSend, gridBagConstraints);

        jpbarProgress.setForeground(new java.awt.Color(0, 255, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 4;
        getContentPane().add(jpbarProgress, gridBagConstraints);

        lblProgressTask.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        getContentPane().add(lblProgressTask, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPreviewAll;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<String> jcboxEmailMode;
    private javax.swing.JProgressBar jpbarProgress;
    private javax.swing.JLabel lblEmailMode;
    private javax.swing.JLabel lblEmailSpecification;
    private javax.swing.JLabel lblProgressTask;
    private javax.swing.JTextField txtEmailSpecification;
    // End of variables declaration//GEN-END:variables

    private Session session;
    private ExecuteSessionContract.Controller controller;
    private Frame parent;
    private BulkEmailData bulkEmailData = null;
    private ExecuteBulkMailSessionDialog obj = this;
    private PreviewEmailDialog previewEmailsDialog;
    private String previousMailSpecification = null;
    private ProgressListener progressListener;
    private BulkMailerApplication app = BulkMailerApplication.getInstance();
    private MailLoggerHandler.LoggerErrorListener errorListener = this;
    
    public void setController(ExecuteSessionContract.Controller controller) {
        this.controller = controller;
        this.controller.setProgressListener(this);
    }
        
    private void setupButtons() {
        btnPreviewAll.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handlePreviewing();
            }
        });
        
        btnSend.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleSending();
            }
        });
    }
    
    private void handlePreviewing() {
        if(previousMailSpecification != null && !previousMailSpecification.equals(txtEmailSpecification.getText())) {
            this.bulkEmailData = null;
        }
        if(bulkEmailData == null) {
            this.previousMailSpecification = txtEmailSpecification.getText();
            this.controller.processPreviewing(session, jcboxEmailMode.getSelectedItem().toString(), txtEmailSpecification.getText());       
        } else {
            previewEmails(bulkEmailData);
        }
    }
    
    private void handleSending() {
        if(previousMailSpecification != null && !previousMailSpecification.equals(txtEmailSpecification.getText())) {
            this.bulkEmailData = null;
        }
        if(bulkEmailData == null) {
            this.previousMailSpecification = txtEmailSpecification.getText();
            this.controller.processSending(session, jcboxEmailMode.getSelectedItem().toString(), txtEmailSpecification.getText());
        } else {
            sendEmails(bulkEmailData);
        }
    }
    
    @Override
    public void onBulkMailDataReady(BulkEmailData data, boolean forPreview) {
        this.bulkEmailData = data;
        prepareProgressBar();
        if(forPreview) {
            previewEmails(data);
        } else {
            sendEmails(data);
        }
    }
    
    private void previewEmails(BulkEmailData data) {
        previewEmailsDialog = new PreviewEmailDialog(parent, true, data);
        previewEmailsDialog.loadHtml();
        previewEmailsDialog.setVisible(true);
        previewEmailsDialog.revalidate();
        previewEmailsDialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                previewEmailsDialog.dispose();
                previewEmailsDialog = null;
            }
            
        });
    }
    
    private void sendEmails(BulkEmailData data) {
        AttemptJson attempt = new AttemptJson();
        attempt.setSessionName(session.getName());
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                executeSending(data, attempt);
            }
        });
    }
    
    private void executeSending(BulkEmailData data, AttemptJson attempt) {
        FoiMailer foiMailer = new FoiMailer(app.getUsername(), app.getPassword());
        foiMailer.setProgressListener(obj);
        foiMailer.setAttemptData(attempt);
        btnSend.setEnabled(false);
        foiMailer.createMessages(data.getSubject(), data.convertToMessageItems(session));
        foiMailer.sendMessages();
        prepareProgressBar(); 
        btnSend.setEnabled(true);
        attempt.setCompletedAt(new Date());
        attempt.getStatistics().calculateUnprocessed(data.getEmailItems().size());
        if(attempt.getStatus() == null || attempt.getStatus().isEmpty()) {
            attempt.setStatus("Uspješno");
            attempt.setStatusMessage("Poruke su uspješno poslane.");
        }
        try {
            AttemptUtils.storeAttempt(session, attempt);
        } catch (IOException ex) {
            Logger.getLogger(ExecuteBulkMailSessionDialog.class.getName()).log(Level.SEVERE, null, ex);
            if(errorListener != null) {
                errorListener.onErrorOccurred(ex, ex.getMessage());
            }
        }
    }
    
    private void prepareProgressBar() {
        SwingUtilities.invokeLater(() -> {
            jpbarProgress.setIndeterminate(false);
            jpbarProgress.setValue(0);
            lblProgressTask.setText(null);
            lblProgressTask.setVisible(false);
            jpbarProgress.update(jpbarProgress.getGraphics());
            lblProgressTask.update(lblProgressTask.getGraphics());
        });
    }

    @Override
    public void setProgressAction(String actionName, int totalTaskCount, boolean indeterminate) {
        SwingUtilities.invokeLater(() -> {
            jpbarProgress.setIndeterminate(indeterminate);
            jpbarProgress.setValue(0);
            jpbarProgress.setMinimum(0);
            jpbarProgress.setMaximum(totalTaskCount);
            lblProgressTask.setText(actionName + "...");
            lblProgressTask.setVisible(true);
            jpbarProgress.update(jpbarProgress.getGraphics());
            lblProgressTask.update(lblProgressTask.getGraphics());
        });
    }

    @Override
    public void updateProgress(int currentTask) {
        SwingUtilities.invokeLater(() -> {
            jpbarProgress.setValue(currentTask);
            jpbarProgress.update(jpbarProgress.getGraphics());
        });
    }

    @Override
    public void onErrorOccurred(Exception ex, String message) {
        JOptionPane.showMessageDialog(this, message, "Greška!", JOptionPane.ERROR_MESSAGE);
    }
    
}
