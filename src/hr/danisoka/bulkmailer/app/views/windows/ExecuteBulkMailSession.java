/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.danisoka.bulkmailer.app.views.windows;

import hr.danisoka.bulkmailer.app.AppConstants;
import hr.danisoka.bulkmailer.app.contracts.ExecuteSessionContract;
import hr.danisoka.bulkmailer.app.models.Session;
import hr.danisoka.bulkmailer.app.models.session.MailRecipientData;
import hr.danisoka.bulkmailer.app.strategies.BuildingMailDataFactory;
import hr.danisoka.bulkmailer.app.strategies.BuildingMailDataInterface;
import hr.danisoka.bulkmailer.app.utils.StringUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;

public class ExecuteBulkMailSession extends JDialog implements ExecuteSessionContract.View{

    /**
     * Creates new form ExecuteBulkMailSession
     */
    public ExecuteBulkMailSession(Session session) {
        initComponents();
        setupButtons();
        this.session = session;
        this.setTitle(this.session.getName());
        this.jcboxSendingMode.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                String selectedItem = e.getItem().toString();
                txtEmailSpecification.setEnabled(selectedItem.equals(AppConstants.AppSettings.Mail.SendingMode.SEND_TO_EMAILS));
                if(selectedItem.equals(AppConstants.AppSettings.Mail.SendingMode.SEND_ALL)) {
                    txtEmailSpecification.setText(null);
                }
            }
        });
        setModalityType(ModalityType.APPLICATION_MODAL);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblMessagingMode = new javax.swing.JLabel();
        jcboxSendingMode = new javax.swing.JComboBox<>();
        lblMailSpecification = new javax.swing.JLabel();
        txtEmailSpecification = new javax.swing.JTextField();
        btnPreviewAll = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        lblMessagingMode.setText("Način slanja e-maila:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(lblMessagingMode, gridBagConstraints);

        jcboxSendingMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pošalji svima", "Pošalji na e-mail adrese" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jcboxSendingMode, gridBagConstraints);

        lblMailSpecification.setText("E-mail adrese (više e-maila odvojiti zarezima):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(lblMailSpecification, gridBagConstraints);

        txtEmailSpecification.setEnabled(false);
        txtEmailSpecification.setMinimumSize(new java.awt.Dimension(300, 20));
        txtEmailSpecification.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        getContentPane().add(txtEmailSpecification, gridBagConstraints);

        btnPreviewAll.setText("Preview All");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(btnPreviewAll, gridBagConstraints);

        btnSend.setText("Pošalji");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(btnSend, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPreviewAll;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<String> jcboxSendingMode;
    private javax.swing.JLabel lblMailSpecification;
    private javax.swing.JLabel lblMessagingMode;
    private javax.swing.JTextField txtEmailSpecification;
    // End of variables declaration//GEN-END:variables

    private Session session;
    private List<MailRecipientData> data;
    
    
    public void setController() {
        
    }
    
    private void setupButtons() {
        btnPreviewAll.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handlePreviewing();
            }
        });
        
        btnSend.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleSending();
            }
        });
    }
    
    private void handlePreviewing() {
        mapDataToJavaObjects();
        
    }
    
    private void handleSending() {
        mapDataToJavaObjects();
        
    }
    
    
    private void mapDataToJavaObjects() {
        try {
            if(data == null) {
                BuildingMailDataInterface strat = BuildingMailDataFactory.getStrategy(session, StringUtils.getItemsFromString(",", txtEmailSpecification.getText()));
                data = strat.buildMailData();            
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ExecuteBulkMailSession.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExecuteBulkMailSession.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
